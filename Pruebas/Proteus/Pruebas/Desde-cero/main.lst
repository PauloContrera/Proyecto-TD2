CCS PCH C Compiler, Version 5.025, 61357               29-nov.-21 17:26

               Filename:   P:\wamp64\www\Proyecto-TD2\Proteus\Desde-cero\main.lst

               ROM used:   1548 bytes (5%)
                           Largest free fragment is 31220
               RAM used:   12 (1%) at main() level
                           64 (3%) worst case
               Stack used: 1 locations
               Stack size: 31

*
0000:  GOTO   05BE
.................... #include <main.h> 
.................... #include <18F2550.h> 
.................... //////////// Standard Header file for the PIC18F2550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 20,73
0016:  DATA 82,42
0018:  DATA 51,44
001A:  DATA 04,72
001C:  DATA 00,50
001E:  CLRF   FF7
0020:  ADDLW  2E
0022:  MOVWF  FF6
0024:  MOVLW  00
0026:  ADDWFC FF7,F
0028:  TBLRD*+
002A:  MOVF   FF5,W
002C:  RETURN 0
002E:  DATA 20,30
0030:  DATA 00,00
0032:  DATA 10,00
0034:  DATA 00,30
0036:  DATA 00,10
0038:  CLRF   FF7
003A:  ADDLW  48
003C:  MOVWF  FF6
003E:  MOVLW  00
0040:  ADDWFC FF7,F
0042:  TBLRD*+
0044:  MOVF   FF5,W
0046:  RETURN 0
0048:  DATA 24,10
004A:  DATA 05,0C
004C:  MOVLW  8E
004E:  MOVWF  00
0050:  MOVF   2C,W
0052:  SUBWF  00,F
0054:  MOVFF  2D,02
0058:  MOVFF  2E,01
005C:  BSF    02.7
005E:  MOVF   00,F
0060:  BZ    0074
0062:  BCF    FD8.0
0064:  MOVF   02,F
0066:  BNZ   006C
0068:  MOVF   01,F
006A:  BZ    0074
006C:  RRCF   02,F
006E:  RRCF   01,F
0070:  DECFSZ 00,F
0072:  BRA    0062
0074:  BTFSS  2D.7
0076:  BRA    0082
0078:  COMF   01,F
007A:  COMF   02,F
007C:  INCF   01,F
007E:  BTFSC  FD8.2
0080:  INCF   02,F
0082:  RETURN 0
0084:  MOVF   2C,W
0086:  BTFSC  FD8.2
0088:  BRA    016C
008A:  MOVWF  00
008C:  MOVF   30,W
008E:  BTFSC  FD8.2
0090:  BRA    016C
0092:  ADDWF  00,F
0094:  BNC   009E
0096:  MOVLW  81
0098:  ADDWF  00,F
009A:  BC    016C
009C:  BRA    00A6
009E:  MOVLW  7F
00A0:  SUBWF  00,F
00A2:  BNC   016C
00A4:  BZ    016C
00A6:  MOVFF  2D,34
00AA:  MOVF   31,W
00AC:  XORWF  34,F
00AE:  BSF    2D.7
00B0:  BSF    31.7
00B2:  MOVF   2F,W
00B4:  MULWF  33
00B6:  MOVFF  FF4,36
00BA:  MOVF   2E,W
00BC:  MULWF  32
00BE:  MOVFF  FF4,03
00C2:  MOVFF  FF3,35
00C6:  MULWF  33
00C8:  MOVF   FF3,W
00CA:  ADDWF  36,F
00CC:  MOVF   FF4,W
00CE:  ADDWFC 35,F
00D0:  MOVLW  00
00D2:  ADDWFC 03,F
00D4:  MOVF   2F,W
00D6:  MULWF  32
00D8:  MOVF   FF3,W
00DA:  ADDWF  36,F
00DC:  MOVF   FF4,W
00DE:  ADDWFC 35,F
00E0:  MOVLW  00
00E2:  CLRF   02
00E4:  ADDWFC 03,F
00E6:  ADDWFC 02,F
00E8:  MOVF   2D,W
00EA:  MULWF  33
00EC:  MOVF   FF3,W
00EE:  ADDWF  35,F
00F0:  MOVF   FF4,W
00F2:  ADDWFC 03,F
00F4:  MOVLW  00
00F6:  ADDWFC 02,F
00F8:  MOVF   2D,W
00FA:  MULWF  32
00FC:  MOVF   FF3,W
00FE:  ADDWF  03,F
0100:  MOVF   FF4,W
0102:  ADDWFC 02,F
0104:  MOVLW  00
0106:  CLRF   01
0108:  ADDWFC 01,F
010A:  MOVF   2F,W
010C:  MULWF  31
010E:  MOVF   FF3,W
0110:  ADDWF  35,F
0112:  MOVF   FF4,W
0114:  ADDWFC 03,F
0116:  MOVLW  00
0118:  ADDWFC 02,F
011A:  ADDWFC 01,F
011C:  MOVF   2E,W
011E:  MULWF  31
0120:  MOVF   FF3,W
0122:  ADDWF  03,F
0124:  MOVF   FF4,W
0126:  ADDWFC 02,F
0128:  MOVLW  00
012A:  ADDWFC 01,F
012C:  MOVF   2D,W
012E:  MULWF  31
0130:  MOVF   FF3,W
0132:  ADDWF  02,F
0134:  MOVF   FF4,W
0136:  ADDWFC 01,F
0138:  INCF   00,F
013A:  BTFSC  01.7
013C:  BRA    0148
013E:  RLCF   35,F
0140:  RLCF   03,F
0142:  RLCF   02,F
0144:  RLCF   01,F
0146:  DECF   00,F
0148:  MOVLW  00
014A:  BTFSS  35.7
014C:  BRA    0162
014E:  INCF   03,F
0150:  ADDWFC 02,F
0152:  ADDWFC 01,F
0154:  MOVF   01,W
0156:  BNZ   0162
0158:  MOVF   02,W
015A:  BNZ   0162
015C:  MOVF   03,W
015E:  BNZ   0162
0160:  INCF   00,F
0162:  BTFSC  34.7
0164:  BSF    01.7
0166:  BTFSS  34.7
0168:  BCF    01.7
016A:  BRA    0174
016C:  CLRF   00
016E:  CLRF   01
0170:  CLRF   02
0172:  CLRF   03
0174:  GOTO   0480 (RETURN)
0178:  MOVLW  8E
017A:  MOVWF  00
017C:  MOVFF  31,01
0180:  MOVFF  30,02
0184:  CLRF   03
0186:  MOVF   01,F
0188:  BNZ   019C
018A:  MOVFF  02,01
018E:  CLRF   02
0190:  MOVLW  08
0192:  SUBWF  00,F
0194:  MOVF   01,F
0196:  BNZ   019C
0198:  CLRF   00
019A:  BRA    01AC
019C:  BCF    FD8.0
019E:  BTFSC  01.7
01A0:  BRA    01AA
01A2:  RLCF   02,F
01A4:  RLCF   01,F
01A6:  DECF   00,F
01A8:  BRA    019C
01AA:  BCF    01.7
01AC:  GOTO   049C (RETURN)
01B0:  MOVLW  80
01B2:  BTFSC  FD8.1
01B4:  XORWF  35,F
01B6:  CLRF   3A
01B8:  CLRF   3B
01BA:  MOVFF  31,39
01BE:  MOVF   35,W
01C0:  XORWF  39,F
01C2:  MOVF   30,W
01C4:  BTFSC  FD8.2
01C6:  BRA    0380
01C8:  MOVWF  38
01CA:  MOVWF  00
01CC:  MOVF   34,W
01CE:  BTFSC  FD8.2
01D0:  BRA    0392
01D2:  SUBWF  38,F
01D4:  BTFSC  FD8.2
01D6:  BRA    02DA
01D8:  BNC   0254
01DA:  MOVFF  35,3E
01DE:  BSF    3E.7
01E0:  MOVFF  36,3D
01E4:  MOVFF  37,3C
01E8:  CLRF   3B
01EA:  BCF    FD8.0
01EC:  RRCF   3E,F
01EE:  RRCF   3D,F
01F0:  RRCF   3C,F
01F2:  RRCF   3B,F
01F4:  DECFSZ 38,F
01F6:  BRA    01E8
01F8:  BTFSS  39.7
01FA:  BRA    0202
01FC:  BSF    3A.0
01FE:  BRA    03BA
0200:  BCF    3A.0
0202:  BCF    38.0
0204:  BSF    3A.4
0206:  CLRF   FEA
0208:  MOVLW  33
020A:  MOVWF  FE9
020C:  BRA    03E0
020E:  BCF    3A.4
0210:  BTFSC  39.7
0212:  BRA    0228
0214:  BTFSS  38.0
0216:  BRA    023E
0218:  RRCF   3E,F
021A:  RRCF   3D,F
021C:  RRCF   3C,F
021E:  RRCF   3B,F
0220:  INCF   00,F
0222:  BTFSC  FD8.2
0224:  BRA    03B0
0226:  BRA    023E
0228:  BTFSC  3E.7
022A:  BRA    0244
022C:  BCF    FD8.0
022E:  RLCF   3B,F
0230:  RLCF   3C,F
0232:  RLCF   3D,F
0234:  RLCF   3E,F
0236:  DECF   00,F
0238:  BTFSC  FD8.2
023A:  BRA    03B0
023C:  BRA    0228
023E:  BSF    3A.6
0240:  BRA    0318
0242:  BCF    3A.6
0244:  MOVFF  31,39
0248:  BTFSS  31.7
024A:  BRA    0250
024C:  BSF    3E.7
024E:  BRA    03A2
0250:  BCF    3E.7
0252:  BRA    03A2
0254:  MOVFF  34,38
0258:  MOVFF  34,00
025C:  MOVF   30,W
025E:  SUBWF  38,F
0260:  MOVFF  31,3E
0264:  BSF    3E.7
0266:  MOVFF  32,3D
026A:  MOVFF  33,3C
026E:  CLRF   3B
0270:  BCF    FD8.0
0272:  RRCF   3E,F
0274:  RRCF   3D,F
0276:  RRCF   3C,F
0278:  RRCF   3B,F
027A:  DECFSZ 38,F
027C:  BRA    026E
027E:  BTFSS  39.7
0280:  BRA    0288
0282:  BSF    3A.1
0284:  BRA    03BA
0286:  BCF    3A.1
0288:  BCF    38.0
028A:  BSF    3A.5
028C:  CLRF   FEA
028E:  MOVLW  37
0290:  MOVWF  FE9
0292:  BRA    03E0
0294:  BCF    3A.5
0296:  BTFSC  39.7
0298:  BRA    02AE
029A:  BTFSS  38.0
029C:  BRA    02C4
029E:  RRCF   3E,F
02A0:  RRCF   3D,F
02A2:  RRCF   3C,F
02A4:  RRCF   3B,F
02A6:  INCF   00,F
02A8:  BTFSC  FD8.2
02AA:  BRA    03B0
02AC:  BRA    02C4
02AE:  BTFSC  3E.7
02B0:  BRA    02CA
02B2:  BCF    FD8.0
02B4:  RLCF   3B,F
02B6:  RLCF   3C,F
02B8:  RLCF   3D,F
02BA:  RLCF   3E,F
02BC:  DECF   00,F
02BE:  BTFSC  FD8.2
02C0:  BRA    03B0
02C2:  BRA    02AE
02C4:  BSF    3A.7
02C6:  BRA    0318
02C8:  BCF    3A.7
02CA:  MOVFF  35,39
02CE:  BTFSS  35.7
02D0:  BRA    02D6
02D2:  BSF    3E.7
02D4:  BRA    03A2
02D6:  BCF    3E.7
02D8:  BRA    03A2
02DA:  MOVFF  35,3E
02DE:  BSF    3E.7
02E0:  MOVFF  36,3D
02E4:  MOVFF  37,3C
02E8:  BTFSS  39.7
02EA:  BRA    02F4
02EC:  BCF    3E.7
02EE:  BSF    3A.2
02F0:  BRA    03BA
02F2:  BCF    3A.2
02F4:  CLRF   3B
02F6:  BCF    38.0
02F8:  CLRF   FEA
02FA:  MOVLW  33
02FC:  MOVWF  FE9
02FE:  BRA    03E0
0300:  BTFSC  39.7
0302:  BRA    033C
0304:  MOVFF  31,39
0308:  BTFSS  38.0
030A:  BRA    0318
030C:  RRCF   3E,F
030E:  RRCF   3D,F
0310:  RRCF   3C,F
0312:  RRCF   3B,F
0314:  INCF   00,F
0316:  BZ    03B0
0318:  BTFSS  3B.7
031A:  BRA    0332
031C:  INCF   3C,F
031E:  BNZ   0332
0320:  INCF   3D,F
0322:  BNZ   0332
0324:  INCF   3E,F
0326:  BNZ   0332
0328:  RRCF   3E,F
032A:  RRCF   3D,F
032C:  RRCF   3C,F
032E:  INCF   00,F
0330:  BZ    03B0
0332:  BTFSC  3A.6
0334:  BRA    0242
0336:  BTFSC  3A.7
0338:  BRA    02C8
033A:  BRA    0374
033C:  MOVLW  80
033E:  XORWF  3E,F
0340:  BTFSS  3E.7
0342:  BRA    034C
0344:  BRA    03BA
0346:  MOVFF  35,39
034A:  BRA    0360
034C:  MOVFF  31,39
0350:  MOVF   3E,F
0352:  BNZ   0360
0354:  MOVF   3D,F
0356:  BNZ   0360
0358:  MOVF   3C,F
035A:  BNZ   0360
035C:  CLRF   00
035E:  BRA    03A2
0360:  BTFSC  3E.7
0362:  BRA    0374
0364:  BCF    FD8.0
0366:  RLCF   3B,F
0368:  RLCF   3C,F
036A:  RLCF   3D,F
036C:  RLCF   3E,F
036E:  DECFSZ 00,F
0370:  BRA    0360
0372:  BRA    03B0
0374:  BTFSS  39.7
0376:  BRA    037C
0378:  BSF    3E.7
037A:  BRA    03A2
037C:  BCF    3E.7
037E:  BRA    03A2
0380:  MOVFF  34,00
0384:  MOVFF  35,3E
0388:  MOVFF  36,3D
038C:  MOVFF  37,3C
0390:  BRA    03A2
0392:  MOVFF  30,00
0396:  MOVFF  31,3E
039A:  MOVFF  32,3D
039E:  MOVFF  33,3C
03A2:  MOVFF  3E,01
03A6:  MOVFF  3D,02
03AA:  MOVFF  3C,03
03AE:  BRA    0418
03B0:  CLRF   00
03B2:  CLRF   01
03B4:  CLRF   02
03B6:  CLRF   03
03B8:  BRA    0418
03BA:  CLRF   3B
03BC:  COMF   3C,F
03BE:  COMF   3D,F
03C0:  COMF   3E,F
03C2:  COMF   3B,F
03C4:  INCF   3B,F
03C6:  BNZ   03D2
03C8:  INCF   3C,F
03CA:  BNZ   03D2
03CC:  INCF   3D,F
03CE:  BNZ   03D2
03D0:  INCF   3E,F
03D2:  BTFSC  3A.0
03D4:  BRA    0200
03D6:  BTFSC  3A.1
03D8:  BRA    0286
03DA:  BTFSC  3A.2
03DC:  BRA    02F2
03DE:  BRA    0346
03E0:  MOVF   FEF,W
03E2:  ADDWF  3C,F
03E4:  BNC   03F0
03E6:  INCF   3D,F
03E8:  BNZ   03F0
03EA:  INCF   3E,F
03EC:  BTFSC  FD8.2
03EE:  BSF    38.0
03F0:  MOVF   FED,F
03F2:  MOVF   FEF,W
03F4:  ADDWF  3D,F
03F6:  BNC   03FE
03F8:  INCF   3E,F
03FA:  BTFSC  FD8.2
03FC:  BSF    38.0
03FE:  MOVF   FED,F
0400:  MOVF   FEF,W
0402:  BTFSC  FEF.7
0404:  BRA    0408
0406:  XORLW  80
0408:  ADDWF  3E,F
040A:  BTFSC  FD8.0
040C:  BSF    38.0
040E:  BTFSC  3A.4
0410:  BRA    020E
0412:  BTFSC  3A.5
0414:  BRA    0294
0416:  BRA    0300
0418:  GOTO   04C0 (RETURN)
041C:  MOVF   2F,W
041E:  CLRF   01
0420:  SUBWF  2E,W
0422:  BC    042A
0424:  MOVFF  2E,00
0428:  BRA    0442
042A:  CLRF   00
042C:  MOVLW  08
042E:  MOVWF  30
0430:  RLCF   2E,F
0432:  RLCF   00,F
0434:  MOVF   2F,W
0436:  SUBWF  00,W
0438:  BTFSC  FD8.0
043A:  MOVWF  00
043C:  RLCF   01,F
043E:  DECFSZ 30,F
0440:  BRA    0430
0442:  RETURN 0
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #FUSES XT, NOWDT, PUT, NOMCLR,BROWNOUT,NOLVP                    //No Watch Dog Timer 
.................... //#use delay(internal=4MHz) 
.................... #use delay(internal=4Mhz,clock_out) 
*
054E:  CLRF   FEA
0550:  MOVLW  13
0552:  MOVWF  FE9
0554:  MOVF   FEF,W
0556:  BZ    0574
0558:  MOVLW  01
055A:  MOVWF  01
055C:  CLRF   00
055E:  DECFSZ 00,F
0560:  BRA    055E
0562:  DECFSZ 01,F
0564:  BRA    055C
0566:  MOVLW  4A
0568:  MOVWF  00
056A:  DECFSZ 00,F
056C:  BRA    056A
056E:  BRA    0570
0570:  DECFSZ FEF,F
0572:  BRA    0558
0574:  GOTO   05B6 (RETURN)
....................  
....................  
.................... BYTE CONST Display[10]={0x020,0x073,0x082,0x042,0x051,0x044,0x004,0x072,0x000,0x050}; 
.................... BYTE CONST DisplayB[10]={0x020,0x030,0x000,0x000,0x010,0x000,0x000,0x030,0x000,0x010}; 
.................... BYTE CONST ColumnasA[4]={0x024,0x010,0x005,0x00C}; 
.................... BYTE CONST ColumnasB[4]={0x004,0x000,0x004,0x014}; 
.................... int dato[4]; 
.................... float numerico=18.76 ; 
....................  
.................... #DEFINE LED PORTB,0 
.................... #byte PORTC= 0xf82 
.................... #byte PORTB= 0xf81 
.................... #byte PORTA= 0xf80 
....................  
.................... #byte TRISA=0xf92  
....................  
....................  
.................... void muestra(int dato[4]){ 
.................... for (int i=0;i<4;i++) { 
0578:  CLRF   12
057A:  MOVF   12,W
057C:  SUBLW  03
057E:  BNC   05BA
....................          PORTA=ColumnasA[i]; 
0580:  CLRF   03
0582:  MOVF   12,W
0584:  RCALL  0038
0586:  MOVWF  F80
....................          //PORTB=ColumnasB[i]; 
....................          PORTC=Display[dato[i]]; 
0588:  MOVF   12,W
058A:  ADDWF  10,W
058C:  MOVWF  FE9
058E:  MOVLW  00
0590:  ADDWFC 11,W
0592:  MOVWF  FEA
0594:  CLRF   03
0596:  MOVF   FEF,W
0598:  RCALL  0004
059A:  MOVWF  F82
....................          PORTB=DisplayB[dato[i]]; 
059C:  MOVF   12,W
059E:  ADDWF  10,W
05A0:  MOVWF  FE9
05A2:  MOVLW  00
05A4:  ADDWFC 11,W
05A6:  MOVWF  FEA
05A8:  CLRF   03
05AA:  MOVF   FEF,W
05AC:  RCALL  001E
05AE:  MOVWF  F81
....................          DELAY_MS(10); 
05B0:  MOVLW  0A
05B2:  MOVWF  13
05B4:  BRA    054E
05B6:  INCF   12,F
05B8:  BRA    057A
....................    } 
....................    return; 
05BA:  GOTO   0608 (RETURN)
.................... } 
.................... void convertirdato(float numero){ 
*
0444:  CLRF   28
0446:  CLRF   29
0448:  CLRF   2A
044A:  CLRF   2B
....................  
.................... int cifras[10]; 
....................    int cifras2[10]; 
....................    int i=0; 
....................    int j=0; 
....................    int aux=0; 
....................    int aux2=0; 
....................     
....................    aux=numero; 
044C:  MOVFF  13,2F
0450:  MOVFF  12,2E
0454:  MOVFF  11,2D
0458:  MOVFF  10,2C
045C:  RCALL  004C
045E:  MOVFF  01,2A
....................    aux2=(numero*100)-(aux*100); 
0462:  MOVFF  13,2F
0466:  MOVFF  12,2E
046A:  MOVFF  11,2D
046E:  MOVFF  10,2C
0472:  CLRF   33
0474:  CLRF   32
0476:  MOVLW  48
0478:  MOVWF  31
047A:  MOVLW  85
047C:  MOVWF  30
047E:  BRA    0084
0480:  MOVFF  03,2F
0484:  MOVFF  02,2E
0488:  MOVFF  01,2D
048C:  MOVFF  00,2C
0490:  MOVF   2A,W
0492:  MULLW  64
0494:  MOVF   FF3,W
0496:  CLRF   31
0498:  MOVWF  30
049A:  BRA    0178
049C:  BSF    FD8.1
049E:  MOVFF  2F,33
04A2:  MOVFF  2E,32
04A6:  MOVFF  2D,31
04AA:  MOVFF  2C,30
04AE:  MOVFF  03,37
04B2:  MOVFF  02,36
04B6:  MOVFF  01,35
04BA:  MOVFF  00,34
04BE:  BRA    01B0
04C0:  MOVFF  03,2F
04C4:  MOVFF  02,2E
04C8:  MOVFF  01,2D
04CC:  MOVFF  00,2C
04D0:  RCALL  004C
04D2:  MOVFF  01,2B
....................  
....................    while (aux2>0) { 
04D6:  MOVF   2B,F
04D8:  BZ    0508
....................       cifras2[j]=aux2%10; 
04DA:  CLRF   03
04DC:  MOVF   29,W
04DE:  ADDLW  1E
04E0:  MOVWF  FE9
04E2:  MOVLW  00
04E4:  ADDWFC 03,W
04E6:  MOVWF  FEA
04E8:  MOVFF  2B,2E
04EC:  MOVLW  0A
04EE:  MOVWF  2F
04F0:  RCALL  041C
04F2:  MOVFF  00,FEF
....................       aux2=aux2/10; 
04F6:  MOVFF  2B,2E
04FA:  MOVLW  0A
04FC:  MOVWF  2F
04FE:  RCALL  041C
0500:  MOVFF  01,2B
....................       j++; 
0504:  INCF   29,F
0506:  BRA    04D6
....................    } 
....................    while (aux>0) { 
0508:  MOVF   2A,F
050A:  BZ    053A
....................       cifras[i]=aux%10; 
050C:  CLRF   03
050E:  MOVF   28,W
0510:  ADDLW  14
0512:  MOVWF  FE9
0514:  MOVLW  00
0516:  ADDWFC 03,W
0518:  MOVWF  FEA
051A:  MOVFF  2A,2E
051E:  MOVLW  0A
0520:  MOVWF  2F
0522:  RCALL  041C
0524:  MOVFF  00,FEF
....................       aux=aux/10; 
0528:  MOVFF  2A,2E
052C:  MOVLW  0A
052E:  MOVWF  2F
0530:  RCALL  041C
0532:  MOVFF  01,2A
....................       i++; 
0536:  INCF   28,F
0538:  BRA    0508
....................    } 
....................    dato[0]=cifras[1]; 
053A:  MOVFF  15,04
....................    dato[1]=cifras[0]; 
053E:  MOVFF  14,05
....................    dato[2]=cifras2[1]; 
0542:  MOVFF  1F,06
....................    dato[3]=cifras2[0]; 
0546:  MOVFF  1E,07
....................  
....................    return; 
054A:  GOTO   0600 (RETURN)
.................... } 
....................  
....................  
.................... //BYTE CONST Display[10]={0x080,0x0F1,0x044,0x060,0x031,0x022,0x002,0x0F0,0x000,0x030}; 
.................... //BYTE CONST Columnas[4]={0x00C,0x020,0x044,0x084}; 
.................... //int dato[4]={5,9,6,3}; 
....................  
....................  
....................  
....................  
.................... void main() 
*
05BE:  CLRF   FF8
05C0:  BCF    FD0.7
05C2:  MOVLW  60
05C4:  MOVWF  FD3
05C6:  MOVF   FD3,W
05C8:  MOVLW  7B
05CA:  MOVWF  0B
05CC:  MOVLW  14
05CE:  MOVWF  0A
05D0:  MOVLW  16
05D2:  MOVWF  09
05D4:  MOVLW  83
05D6:  MOVWF  08
05D8:  MOVF   FC1,W
05DA:  ANDLW  C0
05DC:  IORLW  0F
05DE:  MOVWF  FC1
05E0:  MOVLW  07
05E2:  MOVWF  FB4
.................... { 
....................    SET_TRIS_C(0000000); 
05E4:  MOVLW  00
05E6:  MOVWF  F94
....................    SET_TRIS_B(00000000); 
05E8:  MOVWF  F93
....................    PORTB=0; 
05EA:  CLRF   F81
....................    PORTA=0; 
05EC:  CLRF   F80
....................    int d[4]; 
....................    while(TRUE) 
....................    { 
....................    convertirdato(numerico); 
05EE:  MOVFF  0B,13
05F2:  MOVFF  0A,12
05F6:  MOVFF  09,11
05FA:  MOVFF  08,10
05FE:  BRA    0444
....................    muestra(dato); 
0600:  CLRF   11
0602:  MOVLW  04
0604:  MOVWF  10
0606:  BRA    0578
0608:  BRA    05EE
....................  
....................    } 
....................  
.................... } 
....................  
060A:  SLEEP 
....................  
....................  

Configuration Fuses:
   Word  1: C93F   PLL12 CPUDIV4 USBDIV INTRC FCMEN IESO
   Word  2: 1E3E   PUT BROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 0700   CCP2C1 PBADEN LPT1OSC NOMCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
