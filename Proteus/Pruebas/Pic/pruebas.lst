CCS PCH C Compiler, Version 5.076, 56587               28-sep.-21 05:49

               Filename:   P:\wamp64\www\Proyecto-TD2\Proteus\Pic\pruebas.lst

               ROM used:   252 bytes (1%)
                           Largest free fragment is 32516
               RAM used:   9 (0%) at main() level
                           14 (1%) worst case
               Stack used: 0 locations
               Stack size: 31

*
0000:  GOTO   00D2
.................... #INCLUDE <18f2550.h> 
.................... //////////// Standard Header file for the PIC18F2550 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC18F2550 
0004:  CLRF   FF7
0006:  ADDLW  14
0008:  MOVWF  FF6
000A:  MOVLW  00
000C:  ADDWFC FF7,F
000E:  TBLRD*+
0010:  MOVF   FF5,W
0012:  RETURN 0
0014:  DATA 3F,06
0016:  DATA 5B,4F
0018:  DATA 66,6D
001A:  DATA 7D,07
001C:  DATA 7F,67
001E:  MOVF   0D,W
0020:  CLRF   01
0022:  SUBWF  0C,W
0024:  BC    002C
0026:  MOVFF  0C,00
002A:  BRA    0044
002C:  CLRF   00
002E:  MOVLW  08
0030:  MOVWF  0E
0032:  RLCF   0C,F
0034:  RLCF   00,F
0036:  MOVF   0D,W
0038:  SUBWF  00,W
003A:  BTFSC  FD8.0
003C:  MOVWF  00
003E:  RLCF   01,F
0040:  DECFSZ 0E,F
0042:  BRA    0032
0044:  RETURN 0
....................  
.................... #list 
....................  
.................... //#USE DELAY(CLOCK=4000000) //Reloj interno 4MHz 
.................... #use delay(clock=4000000,crystal)//Crystal Externo 4MHz 
0046:  CLRF   FEA
0048:  MOVLW  0C
004A:  MOVWF  FE9
004C:  MOVF   FEF,W
004E:  BZ    006C
0050:  MOVLW  01
0052:  MOVWF  01
0054:  CLRF   00
0056:  DECFSZ 00,F
0058:  BRA    0056
005A:  DECFSZ 01,F
005C:  BRA    0054
005E:  MOVLW  4A
0060:  MOVWF  00
0062:  DECFSZ 00,F
0064:  BRA    0062
0066:  BRA    0068
0068:  DECFSZ FEF,F
006A:  BRA    0050
006C:  RETURN 0
.................... #FUSES XT,NOPROTECT,NOWDT,NOBROWNOUT,PUT,NOLVP 
.................... Byte CONST display[10]= {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x67}; 
.................... #BYTE PORTB= 6 
.................... #BYTE PORTC= 7 
.................... #DEFINE TUNI PORTC,0 //Definición de variables 
.................... #DEFINE TDEC PORTC,1 //Definición de variables 
....................  
.................... INT CONT;   //Declarar la variable CONT como 
....................             //un entero, es decir de 8 bits 
.................... LONG CONTRET;  //Declarar la variable CONTRET 
....................                //como long, es decir de 16 bits 
....................                 
....................                 
.................... VOID MOSTRAR( ) //Rutina mostrar 
.................... { 
....................    INT UNI,DEC;   //Declarar las variables UNI, DEC 
....................                   //como un entero, es decir de 8bits 
....................    DEC=CONT/10; 
006E:  MOVFF  04,0C
0072:  MOVLW  0A
0074:  MOVWF  0D
0076:  RCALL  001E
0078:  MOVFF  01,0B
....................    UNI=CONT%10; 
007C:  MOVFF  04,0C
0080:  MOVLW  0A
0082:  MOVWF  0D
0084:  RCALL  001E
0086:  MOVFF  00,0A
....................    PORTB=(DISPLAY[UNI]);   //Muestra lo que hay en unidades 
008A:  CLRF   03
008C:  MOVF   0A,W
008E:  RCALL  0004
0090:  MOVWF  06
....................                            //en el display 
....................    BIT_SET (TUNI);         //Enciende el display de unidades 
0092:  BSF    07.0
....................    DELAY_MS(1);            //Retardo de 1 milisegundos 
0094:  MOVLW  01
0096:  MOVWF  0C
0098:  RCALL  0046
....................    BIT_CLEAR(TUNI);        //Apaga el display de unidades 
009A:  BCF    07.0
....................    PORTB=(DISPLAY[DEC]);   //Muestra lo que hay en unidades 
009C:  CLRF   03
009E:  MOVF   0B,W
00A0:  RCALL  0004
00A2:  MOVWF  06
....................                            //en el display 
....................    BIT_SET (TDEC);         //Enciende el display de decenas 
00A4:  BSF    07.1
....................    DELAY_MS(1);            //Retardo de 1 milisegundos 
00A6:  MOVLW  01
00A8:  MOVWF  0C
00AA:  RCALL  0046
....................    BIT_CLEAR(TDEC);        //Apaga el display de decenas 
00AC:  BCF    07.1
00AE:  GOTO   00C4 (RETURN)
....................     
.................... } 
....................  
....................  
.................... VOID RET1SEG() //Rutina RET1SEG 
.................... { 
....................    CONTRET=500; //Cargue con 500 la variable CONTRET 
00B2:  MOVLW  01
00B4:  MOVWF  09
00B6:  MOVLW  F4
00B8:  MOVWF  08
....................    WHILE (CONTRET>0) //Mientras que la variable CONTRET sea mayor que cero 
00BA:  MOVF   08,F
00BC:  BNZ   00C2
00BE:  MOVF   09,F
00C0:  BZ    00CE
....................    { 
....................       MOSTRAR();        //Llamar la rutina MOSTRAR 
00C2:  BRA    006E
....................       CONTRET--;        // Decremente la variable CONTRET 
00C4:  MOVF   08,W
00C6:  BTFSC  FD8.2
00C8:  DECF   09,F
00CA:  DECF   08,F
00CC:  BRA    00BA
....................    } 
00CE:  GOTO   00F4 (RETURN)
.................... } 
....................  
.................... void MAIN() 
00D2:  CLRF   FF8
00D4:  BCF    FD0.7
00D6:  MOVF   FC1,W
00D8:  ANDLW  C0
00DA:  IORLW  0F
00DC:  MOVWF  FC1
00DE:  MOVLW  07
00E0:  MOVWF  FB4
.................... { 
....................    SET_TRIS_B(0); //El puerto B esta configurado como salida 
00E2:  MOVLW  00
00E4:  MOVWF  F93
....................    SET_TRIS_C(0); // El puerto C esta configurado como salida 
00E6:  MOVWF  F94
....................    CONT=0;  //la variable CONT se inicializa con cero 
00E8:  CLRF   04
....................  
....................    WHILE(TRUE) //Haga por siempre 
....................    { 
....................       CONT=0; 
00EA:  CLRF   04
....................       WHILE(CONT<100) //mientras la variable CONT es menor que 100 
00EC:  MOVF   04,W
00EE:  SUBLW  63
00F0:  BNC   00F8
....................       { 
....................          RET1SEG( ); //Llama la rutina RET1SEG 
00F2:  BRA    00B2
....................          CONT++; //Incrementa la variable CONT 
00F4:  INCF   04,F
00F6:  BRA    00EC
....................       } 
00F8:  BRA    00EA
....................        
....................    } 
.................... } 
00FA:  SLEEP 

Configuration Fuses:
   Word  1: C000   PLL1 CPUDIV1 NOUSBDIV XT FCMEN IESO
   Word  2: 1E38   PUT NOBROWNOUT BORV21 VREGEN NOWDT WDT32768
   Word  3: 8700   CCP2C1 PBADEN LPT1OSC MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
